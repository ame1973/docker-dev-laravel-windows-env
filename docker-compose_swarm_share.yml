version: "3.7"

x-base_deploy: &base_deploy
  update_config:
    parallelism: 1
    delay: 5s
    failure_action: rollback
    monitor: 5s
    max_failure_ratio: 0.0
    order: start-first
#  rollback_config:
#    parallelism: 1
#    delay: 5s
#    failure_action: pause
#    monitor: 5s
#    max_failure_ratio: 0.0
#    order: stop-first
#  restart_policy:
#    condition: any
#    delay: 30s
#    max_attempts: 5
#    window: 30s

services:

  mongo:
    image: mongo:6.0.6
    environment:
      - MONGO_INITDB_ROOT_USERNAME=nftiv.admin
      - MONGO_INITDB_ROOT_PASSWORD=BbHg4szbty9DFpL8
#    secrets:
#      - share.mongo.root.username
#      - share.mongo.root.password
    volumes:
      - ./volumes/mongo/db:/data/db
      - ./volumes/mongo/configdb:/data/configdb
    networks:
      - share_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh 127.0.0.1:27017/NFTIV --quiet
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 5s
    deploy:
      replicas: 1
      <<: *base_deploy

  mysql:
    image: mysql/mysql-server:8.0.30
    tty: true
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_ROOT_HOST: 172.%.%.%
    volumes:
      - ./volumes/mysql:/var/lib/mysql/
      - ./config/mysql/my.cnf:/etc/mysql/my.cnf
    ports:
      - 3306
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", '-u', 'root', '-p$$MYSQL_ROOT_PASSWORD']
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - share_network
    deploy:
      replicas: 1

  meilisearch:
    image: getmeili/meilisearch:v1.1
    volumes:
      - ./volumes/meilisearch:/data.ms
    ports:
      - 7700
    environment:
      - MEILI_NO_ANALYTICS
      - MEILI_MASTER_KEY=%W&&To#oj43qGrrs
    networks:
      - share_network
    healthcheck:
      test: ["CMD", "curl", "-X", "GET", "http://localhost:7700/health"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 5s
    deploy:
      replicas: 1
      <<: *base_deploy

  redis:
    tty: true
    image: redis:7.0.11-alpine
#    command: redis-server /redis/config/redis.conf
    environment:
#      - REDIS_REPLICATION_MODE=master
      - REDIS_PASSWORD=p9p83HaACJ@yY##M
#      - REDIS_EXTRA_FLAGS=--maxmemory 256mb --min-replicas-to-write 3
    ports:
      - 6379
    volumes:
#      - ./config/redis:/redis
      - ./volumes/redis/data:/data
      - ./volumes/redis/logs:/var/log/redis
    networks:
      - share_network
    healthcheck:
      test: [ "CMD", "redis-cli","ping" ]
    deploy:
      mode: replicated
      replicas: 1
      <<: *base_deploy

#  redis-slave:
#    tty: true
#    image: redis:7.0.11-alpine
#    depends_on:
#      - redis-master
#    command: redis-server /redis/config/redis.conf
#    ports:
#      - 6379
#    volumes:
#      - ./config/redis:/redis
#      - ./volumes/redis/data:/data
#      - ./volumes/redis/logs:/var/log/redis
#    networks:
#      - share_network
#    healthcheck:
#      test: [ "CMD", "redis-cli","ping" ]
#    deploy:
#      mode: replicated
#      replicas: 2
#      <<: *base_deploy

#  redis-sentinel:
#    tty: true
#    image: redis:7.0.11-alpine
#    networks:
#      - share_network
#    ports:
#      - '26379:26379'
#    depends_on:
#      - redis-master
#    volumes:
#      - ./volumes/redis-sentinel/data:/data
#      - ./volumes/redis-sentinel/logs:/var/log/redis
#    healthcheck:
#      test: [ "CMD", "redis-cli","ping" ]
#    entrypoint: |
#      /bin/sh -c '/bin/sh -s <<EOF
#      "/bin/sh" -c "cat <<EOF > /sentinel.conf
#      port 26379
#      sentinel resolve-hostnames yes
#      sentinel monitor mymaster redis-master 6379 2
#      sentinel down-after-milliseconds mymaster 5000
#      sentinel failover-timeout mymaster 60000
#      sentinel parallel-syncs mymaster 1
#      sentinel auth-pass mymaster p9p83HaACJ@yY##M
#      EOF"
#      "/bin/sh" -c "redis-sentinel /sentinel.conf"
#      EOF'
#    deploy:
#      mode: replicated
#      replicas: 3
#      <<: *base_deploy

networks:
  share_network:
    external: true